{"version":3,"sources":["components/PersonForm.js","components/Persons.js","components/Filter.js","components/Notification.js","components/Error.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["PersonForm","props","onSubmit","addPerson","value","newName","onChange","handleNameChange","newNumber","handleNumberChange","type","Persons","personsToShow","handleDelete","map","key","id","name","number","onClick","Filter","newKeyword","handleKeywordChange","Notification","message","style","fontSize","color","background","borderStyle","borderRadius","padding","marginBottom","Error","baseUrl","axios","get","then","response","data","newPerson","post","respone","updatedPerson","put","delete","App","useState","persons","setPersons","setNewName","setNewNumber","setNewKeyword","notification","setNotification","error","setError","useEffect","console","log","personService","filter","toLocaleLowerCase","includes","event","target","preventDefault","window","confirm","person","find","p","toLowerCase","setTimeout","catch","addedPerson","concat","res","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.98add150.chunk.js","sourcesContent":["import React from 'react'\n\nconst PersonForm = (props) => {\n    return (\n        <form onSubmit={props.addPerson}>\n        <div>\n          name: <input value={props.newName} onChange={props.handleNameChange}/>\n        </div>\n        <div>\n          number: <input value={props.newNumber} onChange={props.handleNumberChange}/>\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n}\n\nexport default PersonForm","import React from 'react'\n\nconst Persons = ({personsToShow, handleDelete}) => {\n    return (\n        <div>\n            {personsToShow.map(value => \n                <div key={value.id}>\n                    {value.name} {value.number} <button onClick={() => handleDelete(value)}>delete</button>\n                </div>)\n            } \n        </div>\n    )\n}\n\nexport default Persons","import React from 'react'\nconst Filter = ({newKeyword, handleKeywordChange}) => {\n    return (\n        <div>\n            filter shown with <input value={newKeyword} onChange={handleKeywordChange}/>\n        </div>\n    )\n}\n\nexport default Filter","import React from 'react'\n\nconst Notification = ({message}) => {\n    \n    const style = {\n        fontSize: 16,\n        color: 'green',\n        background: 'lightgrey',\n        borderStyle: 'solid',\n        borderRadius: 5,\n        padding: 10,\n        marginBottom: 10\n    }\n\n    if(message === null) {\n        return null\n    } else {\n        return (\n            <div style={style}>{message}</div>\n        )\n    }\n}\n\nexport default Notification","import React from 'react'\n\nconst Error = ({message}) => {\n    \n    const style = {\n        fontSize: 16,\n        color: 'red',\n        background: 'lightgrey',\n        borderStyle: 'solid',\n        borderRadius: 5,\n        padding: 10,\n        marginBottom: 10\n    }\n\n    if(message === null) {\n        return null\n    } else {\n        return (\n            <div style={style}>{message}</div>\n        )\n    }\n}\n\nexport default Error","import axios from 'axios'\n\nconst baseUrl = 'https://arcane-cove-57668.herokuapp.com/api/persons'\n\nconst getAll = () => {\n    return axios\n        .get(baseUrl)\n        .then(response => response.data)\n}\n\nconst create = (newPerson) => {\n    return axios\n        .post(baseUrl, newPerson)\n        .then(respone => respone.data)\n}\n\nconst update = (id,updatedPerson) => {\n    return axios\n        .put(`${baseUrl}/${id}`,updatedPerson)\n        .then(respone => respone.data)\n}\n\nconst remove = (id) => {\n    return axios\n        .delete(`${baseUrl}/${id}`)\n        .then(response => response.data)\n}\n\nexport default {getAll , create, update, remove}","import React, { useState, useEffect } from 'react'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport Filter from './components/Filter'\nimport Notification from './components/Notification'\nimport Error from './components/Error'\nimport axios from 'axios'\nimport personService from './services/persons'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newKeyword, setNewKeyword ] = useState('')\n  const [ notification, setNotification] = useState(null)\n  const [ error, setError] = useState(null)\n\n  useEffect(()=> {\n    console.log('effect');\n  \n    personService\n      .getAll()\n      .then(persons => {\n        console.log('getAll',persons);      \n        setPersons(persons)\n      })\n  },[])\n\n  const personsToShow = persons.filter(value => value.name.toLocaleLowerCase().includes(newKeyword.toLocaleLowerCase()))\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    if(persons.map(value => value.name).includes(newName)) {\n      if(window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        let person = persons.find(p => p.name.toLowerCase() === newName.toLowerCase())\n        let updatedPerson = {...person, number: newNumber}\n\n        personService\n          .update(updatedPerson.id, updatedPerson)\n          .then(updatedPerson => {\n            setPersons(persons.map(p => p.id === updatedPerson.id ? updatedPerson : p))\n            setNewName('')\n            setNewNumber('')\n            setNotification(`Updated ${updatedPerson.name}`)    \n            setTimeout(() => {\n              setNotification(null)\n            },5000)\n          })\n          .catch(error => {\n            setPersons(persons.filter(p => p.id !== updatedPerson.id))\n            setError(`Information of ${updatedPerson.name} has already been removed from server`)  \n            setTimeout(() => {\n              setError(null)\n            },5000)\n          })\n      }\n    } else {\n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n\n      personService\n        .create(personObject)\n        .then(addedPerson => {\n          setPersons(persons.concat(addedPerson))\n          setNewName('')\n          setNewNumber('')\n          setNotification(`Added ${addedPerson.name}`)\n          setTimeout(() => {\n            setNotification(null)\n          },5000)\n        })\n        .catch(error => {\n          console.log(\"shit happened\",)\n          setError(error.response.data.error)  \n          setTimeout(() => {\n            setError(null)\n          },5000)\n        })\n    }\n  }\n\n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value);\n    setNewNumber(event.target.value)\n  }\n\n  const handleKeywordChange = (event) => {\n    console.log(event.target.value);\n    setNewKeyword(event.target.value)\n  }\n\n  const handleDelete = (person) => {\n    if(window.confirm(`Delete ${person.name}?`)) {\n      personService\n        .remove(person.id)\n        .then(res => {\n          console.log(`deleted`,res);\n          setPersons(persons.filter(p => p.id !== person.id))\n        })\n    }\n  }\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n\n      <Notification message={notification}/>\n      <Error message={error}/>\n\n      <Filter newKeyword={newKeyword}  handleKeywordChange={handleKeywordChange}/>\n\n      <h2>add a new</h2>\n\n      <PersonForm addPerson={addPerson} newName={newName} handleNameChange={handleNameChange} newNumber={newNumber} handleNumberChange={handleNumberChange}/>\n      \n      <h2>Numbers</h2>\n      \n      <Persons personsToShow={personsToShow} handleDelete={handleDelete}/>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}